{
  "version": 3,
  "sources": ["../src/open-developer-documentation.command.tsx", "../src/shared/exec-async.ts", "../src/services/xcode.service.ts"],
  "sourcesContent": ["import { closeMainWindow, open } from \"@raycast/api\";\nimport { XcodeService } from \"./services/xcode.service\";\n\nexport default async () => {\n  await open(XcodeService.developerDocumentationURLScheme);\n  await closeMainWindow();\n};\n", "import { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\n/**\n * Spawns a shell then executes the command within that shell, buffering any generated output.\n */\nexport const execAsync = promisify(exec);\n", "import { execAsync } from \"../shared/exec-async\";\nimport { getApplications } from \"@raycast/api\";\n\n/**\n * XcodeService\n */\nexport class XcodeService {\n  /**\n   * Xcode application bundle identifier\n   */\n  static get bundleIdentifier(): string {\n    return \"com.apple.dt.Xcode\";\n  }\n\n  /**\n   * Xcode download url (Mac App Store)\n   */\n  static get downloadUrl(): string {\n    return \"https://apps.apple.com/app/id497799835\";\n  }\n\n  /**\n   * Xcode Developer Documentation URL Scheme\n   */\n  static get developerDocumentationURLScheme(): string {\n    return \"x-xcode-documentation://\";\n  }\n\n  /**\n   * Retrieve boolean if Xcode is installed\n   */\n  static async isXcodeInstalled(): Promise<boolean> {\n    const applications = await getApplications();\n    return !!applications.find((application) => application.bundleId === XcodeService.bundleIdentifier);\n  }\n\n  /**\n   * Retrieve boolean if Xcode is currently running\n   */\n  static async isXcodeRunning(): Promise<boolean> {\n    try {\n      // prep Xcode process status\n      const output = await execAsync(\"pgrep Xcode\");\n      // Xcode is running if standard output is not empty\n      return output.stdout.trim().length !== 0;\n    } catch {\n      // On error Xcode is not running\n      return false;\n    }\n  }\n\n  /**\n   * Launch Xcode\n   */\n  static launchXcode(): Promise<void> {\n    return execAsync(\n      [\n        // Open Xcode in background (-j)\n        // via bundle identifier (-b)\n        `open -j -b ${XcodeService.bundleIdentifier}`,\n        // Sleep for two seconds to ensure\n        // the process is truly running\n        \"sleep 2\",\n      ].join(\" && \")\n    ).then();\n  }\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAsC,wBCAtC,IAAAC,EAAqB,yBACrBC,EAA0B,gBAKbC,KAAY,aAAU,MAAI,ECLvC,IAAAC,EAAgC,wBAKnBC,EAAN,MAAMC,CAAa,CAIxB,WAAW,kBAA2B,CACpC,MAAO,oBACT,CAKA,WAAW,aAAsB,CAC/B,MAAO,wCACT,CAKA,WAAW,iCAA0C,CACnD,MAAO,0BACT,CAKA,aAAa,kBAAqC,CAEhD,MAAO,CAAC,EADa,QAAM,mBAAgB,GACrB,KAAMC,GAAgBA,EAAY,WAAaD,EAAa,gBAAgB,CACpG,CAKA,aAAa,gBAAmC,CAC9C,GAAI,CAIF,OAFe,MAAME,EAAU,aAAa,GAE9B,OAAO,KAAK,EAAE,SAAW,CACzC,MAAQ,CAEN,MAAO,EACT,CACF,CAKA,OAAO,aAA6B,CAClC,OAAOA,EACL,CAGE,cAAcF,EAAa,gBAAgB,GAG3C,SACF,EAAE,KAAK,MAAM,CACf,EAAE,KAAK,CACT,CACF,EF/DA,IAAOG,EAAQ,SAAY,CACzB,QAAM,QAAKC,EAAa,+BAA+B,EACvD,QAAM,mBAAgB,CACxB",
  "names": ["open_developer_documentation_command_exports", "__export", "open_developer_documentation_command_default", "__toCommonJS", "import_api", "import_child_process", "import_util", "execAsync", "import_api", "XcodeService", "_XcodeService", "application", "execAsync", "open_developer_documentation_command_default", "XcodeService"]
}
