{
  "version": 3,
  "sources": ["../src/ruler.ts", "swift:/Users/runner/work/extensions/extensions/extensions/ruler/swift/Ruler"],
  "sourcesContent": ["import { Clipboard, Toast, closeMainWindow, showToast, getPreferenceValues } from \"@raycast/api\";\nimport { measureDistance } from \"swift:../swift/Ruler\";\n\nexport default async function command() {\n  await closeMainWindow();\n\n  try {\n    const preferences = await getPreferenceValues();\n\n    const distance = (await measureDistance(preferences.dragMode)) as unknown as string | undefined;\n\n    if (!distance) {\n      return;\n    }\n\n    let message = `Distance: ${distance} pixels`;\n\n    if (preferences.copyToClipboard) {\n      message = `Distance of ${distance} pixels successfully copied to clipboard`;\n      await Clipboard.copy(distance);\n    }\n    await showToast({ style: Toast.Style.Success, title: message });\n  } catch (e) {\n    await showToast({ style: Toast.Style.Failure, title: \"Failed to measure distance\" });\n  }\n}\n", "\nimport { environment } from \"@raycast/api\";\nimport { join } from \"path\";\nimport { chmod } from \"fs/promises\";\nimport { spawn } from \"child_process\";\n\nasync function runSwiftFunction(command, ...args) {\n  const swiftPath = join(environment.assetsPath, \"compiled_raycast_swift/Ruler\");\n  await chmod(swiftPath, \"755\");\n\n  return new Promise((resolve, reject) => {\n    const commandArgs = [command];\n    for (const arg of args) {\n      try {\n        commandArgs.push(JSON.stringify(arg, (k, v) => v === undefined ? null : v));\n      } catch (err) {\n        reject(new SwiftError(\"Failed to serialize input to JSON: \" + err.message));\n        return;\n      }\n    }\n    const child = spawn(swiftPath, commandArgs);\n    const stdout = [];\n    const stderr = [];\n\n    child.stdout?.on(\"data\", (data) => {\n      stdout.push(data.toString());\n    });\n    child.stderr?.on(\"data\", (data) => {\n      stderr.push(data.toString());\n    });\n\n    child.on(\"exit\", (code) => {\n      if (code === 0) {\n        try {\n          const result = stdout.join(\"\").trim();\n          if (result.length != 0) {\n            resolve(JSON.parse(result));\n          } else {\n            resolve(null);\n          }\n        } catch (err) {\n          const error = new SwiftError(\"Failed to deserialize result from JSON: \" + err.message);\n          error.stdout = stdout.join(\"\").trim();\n          error.stderr = stderr.join(\"\").trim();\n          reject(error);\n        }\n      } else {\n        const error = new SwiftError(stderr.join(\"\").trim() || stdout.join(\"\").trim() || \"Could not get any data\");\n        error.stdout = stdout.join(\"\").trim();\n        error.stderr = stderr.join(\"\").trim();\n        reject(error);\n      }\n    });\n\n    child.on(\"error\", (error) => {\n      reject(error);\n    });\n  });\n}\n\nexport async function measureDistance(dragMode) {\n  return await runSwiftFunction(\"measureDistance\", dragMode)\n}\n\nexport class SwiftError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"SwiftError\";\n  }\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAkF,wBCClF,IAAAC,EAA4B,wBAC5BC,EAAqB,gBACrBC,EAAsB,uBACtBC,EAAsB,yBAEtB,eAAeC,EAAiBC,KAAYC,EAAM,CAChD,IAAMC,KAAY,QAAK,cAAY,WAAY,8BAA8B,EAC7E,eAAM,SAAMA,EAAW,KAAK,EAErB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,IAAMC,EAAc,CAACL,CAAO,EAC5B,QAAWM,KAAOL,EAChB,GAAI,CACFI,EAAY,KAAK,KAAK,UAAUC,EAAK,CAACC,EAAGC,IAAMA,IAAM,OAAY,KAAOA,CAAC,CAAC,CAC5E,OAASC,EAAK,CACZL,EAAO,IAAIM,EAAW,sCAAwCD,EAAI,OAAO,CAAC,EAC1E,MACF,CAEF,IAAME,KAAQ,SAAMT,EAAWG,CAAW,EACpCO,EAAS,CAAC,EACVC,EAAS,CAAC,EAEhBF,EAAM,QAAQ,GAAG,OAASG,GAAS,CACjCF,EAAO,KAAKE,EAAK,SAAS,CAAC,CAC7B,CAAC,EACDH,EAAM,QAAQ,GAAG,OAASG,GAAS,CACjCD,EAAO,KAAKC,EAAK,SAAS,CAAC,CAC7B,CAAC,EAEDH,EAAM,GAAG,OAASI,GAAS,CACzB,GAAIA,IAAS,EACX,GAAI,CACF,IAAMC,EAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EAChCI,EAAO,QAAU,EACnBb,EAAQ,KAAK,MAAMa,CAAM,CAAC,EAE1Bb,EAAQ,IAAI,CAEhB,OAASM,EAAK,CACZ,IAAMQ,EAAQ,IAAIP,EAAW,2CAA6CD,EAAI,OAAO,EACrFQ,EAAM,OAASL,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCK,EAAM,OAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCT,EAAOa,CAAK,CACd,KACK,CACL,IAAMA,EAAQ,IAAIP,EAAWG,EAAO,KAAK,EAAE,EAAE,KAAK,GAAKD,EAAO,KAAK,EAAE,EAAE,KAAK,GAAK,wBAAwB,EACzGK,EAAM,OAASL,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCK,EAAM,OAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCT,EAAOa,CAAK,CACd,CACF,CAAC,EAEDN,EAAM,GAAG,QAAUM,GAAU,CAC3Bb,EAAOa,CAAK,CACd,CAAC,CACH,CAAC,CACH,CAEA,eAAsBC,EAAgBC,EAAU,CAC9C,OAAO,MAAMpB,EAAiB,kBAAmBoB,CAAQ,CAC3D,CAEO,IAAMT,EAAN,cAAyB,KAAM,CACpC,YAAYU,EAAS,CACnB,MAAMA,CAAO,EACb,KAAK,KAAO,YACd,CACF,EDlEA,eAAOC,GAAiC,CACtC,QAAM,mBAAgB,EAEtB,GAAI,CACF,IAAMC,EAAc,QAAM,uBAAoB,EAExCC,EAAY,MAAMC,EAAgBF,EAAY,QAAQ,EAE5D,GAAI,CAACC,EACH,OAGF,IAAIE,EAAU,aAAaF,CAAQ,UAE/BD,EAAY,kBACdG,EAAU,eAAeF,CAAQ,2CACjC,MAAM,YAAU,KAAKA,CAAQ,GAE/B,QAAM,aAAU,CAAE,MAAO,QAAM,MAAM,QAAS,MAAOE,CAAQ,CAAC,CAChE,MAAY,CACV,QAAM,aAAU,CAAE,MAAO,QAAM,MAAM,QAAS,MAAO,4BAA6B,CAAC,CACrF,CACF",
  "names": ["ruler_exports", "__export", "command", "__toCommonJS", "import_api", "import_api", "import_path", "import_promises", "import_child_process", "runSwiftFunction", "command", "args", "swiftPath", "resolve", "reject", "commandArgs", "arg", "k", "v", "err", "SwiftError", "child", "stdout", "stderr", "data", "code", "result", "error", "measureDistance", "dragMode", "message", "command", "preferences", "distance", "measureDistance", "message"]
}
